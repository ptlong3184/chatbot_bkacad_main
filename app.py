from fastapi import FastAPI, HTTPException, File, UploadFile, Form
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import mysql.connector
from mysql.connector import Error
from google.cloud import dialogflow_v2 as dialogflow
from google.oauth2 import service_account
import os
import json
import requests
from fastapi import UploadFile, File, Form, HTTPException
import openai
import base64
import os

# L·∫•y credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng JSON
credentials_info = json.loads(os.environ["GOOGLE_APPLICATION_CREDENTIALS_JSON"])
credentials = service_account.Credentials.from_service_account_info(credentials_info)

# T·∫°o Dialogflow session client
session_client = dialogflow.SessionsClient(credentials=credentials)

# ID c·ªßa project tr√™n Dialogflow
PROJECT_ID = "chatbottuyensinh-gphg"

# L·∫•y OpenAI API key
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

app = FastAPI()

# Cho ph√©p CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# K·∫øt n·ªëi MySQL
def get_connection():
    return mysql.connector.connect(
        host=os.getenv("DB_HOST").strip(),
        port=int(os.getenv("DB_PORT").strip()),
        user=os.getenv("DB_USER").strip(),
        password=os.getenv("DB_PASSWORD").strip(),
        database=os.getenv("DB_NAME").strip()
    )


# Model cho request
class DialogflowRequest(BaseModel):
    query: str
    session_id: str


class EndSessionRequest(BaseModel):
    session_id: str


def get_scholarship_info():
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT score_range, amount FROM scholarship_info ORDER BY id ASC")
        result = cursor.fetchall()
        return result if result else None
    except Error as e:
        print(f"L·ªói truy v·∫•n h·ªçc b·ªïng: {e}")
        return None
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


def get_major_info_by_keyword(keyword: str):
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)
        query = """
                SELECT major_name, description
                FROM majors_info
                WHERE major_name LIKE %s
                   OR description LIKE %s \
                """
        like_kw = f"%{keyword}%"
        cursor.execute(query, (like_kw, like_kw))
        major = cursor.fetchone()

        if major:
            return f"Ng√†nh {major['major_name']}:\n{major['description']}"
        else:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√†nh h·ªçc ph√π h·ª£p."

    except Error as e:
        print(f"L·ªói khi t√¨m ng√†nh h·ªçc: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi t√¨m ng√†nh h·ªçc."
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


def get_all_majors():
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT major_name, description FROM majors_info")
        majors = cursor.fetchall()
        if not majors:
            return "Hi·ªán t·∫°i ch∆∞a c√≥ th√¥ng tin ng√†nh h·ªçc."

        response = "C√°c ng√†nh ƒë√†o t·∫°o t·∫°i BKACAD:\n"
        for m in majors:
            response += (f"- {m['major_name']}: {m['description']}\n")
        response = "B·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin v·ªÅ ng√†nh n√†o kh√¥ng?\n"
        return response

    except Error as e:
        print(f"L·ªói truy v·∫•n ng√†nh h·ªçc: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n ng√†nh h·ªçc."
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


def get_vieclam_info_by_intent(intent_name: str):
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)

        query = "SELECT content FROM vieclam_info WHERE category = %s"
        cursor.execute(query, (intent_name,))
        result = cursor.fetchone()

        return result["content"] if result else "Hi·ªán ch∆∞a c√≥ th√¥ng tin vi·ªác l√†m cho y√™u c·∫ßu n√†y."

    except Error as e:
        print(f"L·ªói truy v·∫•n vi·ªác l√†m: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n th√¥ng tin vi·ªác l√†m."

    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


# Truy v·∫•n h·ªçc ph√≠
# def get_program_tuition_by_intent():
#     try:
#         conn = get_connection()
#         cursor = conn.cursor(dictionary=True)
#
#         query = """
#                 SELECT p.name AS program_name,
#                        m.major_name,
#                        p.duration,
#                        t.fee_amount,
#                        t.notes
#                 FROM programs p
#                          LEFT JOIN majors_info m ON p.major_id = m.id
#                          LEFT JOIN tuition_fees t ON t.program_id = p.id \
#                 """
#         cursor.execute(query)
#         result = cursor.fetchall()
#
#         return result if result else None
#
#     except Error as e:
#         print(f"L·ªói truy v·∫•n h·ªçc ph√≠: {e}")
#         return None
#
#     finally:
#         if conn and conn.is_connected():
#             cursor.close()
#             conn.close()


@app.get("/")
def root():
    return {"message": "Chatbot API is running"}


@app.post("/dialogflow-proxy")
async def dialogflow_proxy(req: DialogflowRequest):
    user_query = req.query
    session_id = req.session_id

    if not user_query:
        raise HTTPException(status_code=400, detail="Missing query")

    try:
        session = session_client.session_path(PROJECT_ID, session_id)

        text_input = dialogflow.TextInput(text=user_query, language_code="vi")
        query_input = dialogflow.QueryInput(text=text_input)

        response = session_client.detect_intent(
            request={"session": session, "query_input": query_input}
        )

        result = response.query_result
        fulfillment_text = result.fulfillment_text or "Xin l·ªói, t√¥i ch∆∞a c√≥ th√¥ng tin ph√π h·ª£p."
        intent_name = result.intent.display_name if result.intent else ""

        suggestions = []

        if intent_name == "IKetThuc":
            mark_session_ended(session_id)


        elif intent_name == "I_gia_tri_hocbong":

            data = get_scholarship_info()

            if data:

                fulfillment_text = (
                    "üéì BKACAD t·ªï ch·ª©c k·ª≥ thi H·ªçc b·ªïng Sinh vi√™n t√†i nƒÉng h·∫±ng nƒÉm ƒë·ªÉ t√¨m ki·∫øm v√† ∆∞∆°m m·∫ßm c√°c t√†i nƒÉng CNTT tr√™n to√†n qu·ªëc. ƒê√¢y l√† c∆° h·ªôi ƒë·ªÉ c√°c b·∫°n ti·∫øp c·∫≠n m√¥ h√¨nh ƒë√†o t·∫°o hi·ªán ƒë·∫°i chu·∫©n Qu·ªëc t·∫ø v√† ƒë·ªãnh h∆∞·ªõng kh·ªüi nghi·ªáp.<br>"
                    "üìå D√†nh cho h·ªçc sinh l·ªõp 12 ho·∫∑c ƒë√£ t·ªët nghi·ªáp THPT.üìä Gi√° tr·ªã h·ªçc b·ªïng ƒë∆∞·ª£c c·∫•p theo k·∫øt qu·∫£ b√†i thi, c·ª• th·ªÉ nh∆∞ sau:\n")

                for item in data:
                    fulfillment_text += f"- {item['score_range']}: {item['amount']} VNƒê\n"

            suggestions = [
                "H·ªçc b·ªïng BKACAD ƒëƒÉng k√Ω ·ªü ƒë√¢u?",
                "ƒêi·ªÅu ki·ªán ƒë·ªÉ thi h·ªçc b·ªïng l√† g√¨?",
                "BKACAD c√≥ nh·ªØng lo·∫°i h·ªçc b·ªïng n√†o?",
                "Th·ªùi gian thi h·ªçc b·ªïng l√† bao gi·ªù ?"

            ]

            return {

                "response": fulfillment_text,

                "suggestions": suggestions

            }


        elif intent_name == "I_danhsach_nganhhoc":
            fulfillment_text = get_all_majors()
            suggestions = [
                "Ng√†nh L·∫≠p tr√¨nh",
                "Ng√†nh Thi·∫øt k·∫ø ƒë·ªì h·ªça",
                "Ng√†nh Qu·∫£n tr·ªã m·∫°ng",
                "Ng√†nh Marketing"
            ]

        elif intent_name == "I_laptrinh_lagi":
            suggestions = [
                "H·ªçc l·∫≠p tr√¨nh c√≥ kh√≥ kh√¥ng?",
                "H·ªçc l·∫≠p tr√¨nh c·∫ßn k·ªπ nƒÉng g√¨?",
                "Ra tr∆∞·ªùng l√†m g√¨?",
                "Ng√†nh n√†y c√≥ ph√π h·ª£p v·ªõi n·ªØ kh√¥ng?",
                "N·∫øu kh√¥ng gi·ªèi to√°n th√¨ n√™n ch·ªçn ng√†nh n√†y kh√¥ng?",
                "N·∫øu h·ªçc t·ªët to√°n th√¨ n√™n ch·ªçn ng√†nh n√†y kh√¥ng?",
                "So s√°nh l·∫≠p tr√¨nh v√† qu·∫£n tr·ªã m·∫°ng",
                "So s√°nh l·∫≠p tr√¨nh v√† thi·∫øt k·∫ø ƒë·ªì h·ªça",
                "So s√°nh l·∫≠p tr√¨nh v·ªõi marketing",
                "Ng√†nh l·∫≠p tr√¨nh h·ªçc nh·ªØng m√¥n g√¨?"
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name in [
            "I_bkacad_gioithieu",
            "I_bkacad_bachkhoa",
            "I_bkacad_doitac",
            "I_bkacad_pbt",
            "I_bkacad_finish_course"
        ]:
            suggestions = [
                "BKACAD c√≥ ƒë∆∞·ª£c c√¥ng nh·∫≠n b·∫±ng c·∫•p kh√¥ng?",
                "H·ªçc BKACAD c√≥ ƒë∆∞·ª£c ho√£n nghƒ©a v·ª• qu√¢n s·ª± kh√¥ng?",
                "H·ªçc xong BKACAD c√≥ th·ªÉ li√™n th√¥ng kh√¥ng?",
                "Gi√°o tr√¨nh ·ªü BKACAD c√≥ hi·ªán ƒë·∫°i kh√¥ng?",
                "BKACAD c√≥ ƒëi·ªÉm g√¨ n·ªïi b·∫≠t?",
                "L·ªãch s·ª≠ h√¨nh th√†nh c·ªßa BKACAD th·∫ø n√†o?",
                "Tr∆∞·ªùng c√≥ c∆° s·ªü v·∫≠t ch·∫•t t·ªët kh√¥ng?",
                "ƒê·ªôi ng≈© gi·∫£ng vi√™n t·∫°i BKACAD nh∆∞ th·∫ø n√†o?"
            ]
            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }


        elif intent_name == "I_thietkedohoa_lagi":
            suggestions = [
                "Ng√†nh thi·∫øt k·∫ø ƒë·ªì h·ªça c√≥ kh√≥ kh√¥ng?",
                "C·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ h·ªçc thi·∫øt k·∫ø?",
                "Ng√†nh n√†y c√≥ ph√π h·ª£p v·ªõi t√¥i kh√¥ng?",
                "Ra tr∆∞·ªùng l√†m ngh·ªÅ g√¨?",
                "So s√°nh thi·∫øt k·∫ø v√† l·∫≠p tr√¨nh",
                "So s√°nh thi·∫øt k·∫ø v√† marketing",
                "T√¥i v·∫Ω t·ªët th√¨ n√™n ch·ªçn ng√†nh n√†y kh√¥ng?",
                "T√¥i v·∫Ω ch∆∞a t·ªët th√¨ n√™n ch·ªçn ng√†nh n√†y kh√¥ng?",
                "Ng√†nh thi·∫øt k·∫ø n√†y h·ªçc nh·ªØng m√¥n g√¨?"
            ]
            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name == "I_quantrimang_lagi":
            suggestions = [
                "H·ªçc ng√†nh n√†y c√≥ kh√≥ kh√¥ng?",
                "C·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ h·ªçc qu·∫£n tr·ªã m·∫°ng?",
                "Ng√†nh qu·∫£n tr·ªã m·∫°ng n√†y c√≥ ph√π h·ª£p v·ªõi t√¥i kh√¥ng?",
                "Ra tr∆∞·ªùng l√†m vi·ªác g√¨?",
                "So s√°nh l·∫≠p tr√¨nh v√† qu·∫£n tr·ªã m·∫°ng",
                "T√¥i kh√¥ng gi·ªèi to√°n n√™n h·ªçc ng√†nh n√†y kh√¥ng?",
                "T√¥i h·ªçc gi·ªèi to√°n th√¨ ch·ªçn ng√†nh n√†y kh√¥ng?",
                "Ng√†nh qu·∫£n tr·ªã m·∫°ng h·ªçc nh·ªØng m√¥n g√¨?"
            ]
            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }
        elif intent_name == "I_marketing_lagi":
            suggestions = [
                "H·ªçc ng√†nh n√†y c√≥ kh√≥ kh√¥ng?",
                "C·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ h·ªçc Marketing?",
                "T√¥i c√≥ ph√π h·ª£p v·ªõi ng√†nh n√†y kh√¥ng?",
                "Ra tr∆∞·ªùng l√†m ngh·ªÅ g√¨?",
                "So s√°nh Marketing v√† thi·∫øt k·∫ø ƒë·ªì h·ªça",
                "N·∫øu t√¥i kh√¥ng gi·ªèi giao ti·∫øp n√™n h·ªçc ng√†nh n√†y kh√¥ng?",
                "N·∫øu t√¥i giao ti·∫øp t·ªët th√¨ n√™n ch·ªçn ng√†nh n√†y kh√¥ng?",
                "H·ªçc marketing c√≥ nh·ªØng m√¥n h·ªçc g√¨?"
            ]
            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }
        elif intent_name == "I_tuvan_chon_nganh":
            suggestions = [
                "T√¥i kh√¥ng bi·∫øt ch·ªçn ng√†nh n√†o ph√π h·ª£p",
                "C√≥ ng√†nh n√†o d·ªÖ xin vi·ªác kh√¥ng?",
                "T√¥i mu·ªën ch·ªçn ng√†nh theo s·ªü th√≠ch",
                "T√¥i ch∆∞a r√µ kh·∫£ nƒÉng c·ªßa m√¨nh ph√π h·ª£p ng√†nh n√†o"
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name == "I_tuvan_so_thich_all":
            suggestions = [
                "T√¥i ch∆∞a r√µ s·ªü th√≠ch c·ªßa m√¨nh",
                "T√¥i th√≠ch giao ti·∫øp, n√≥i chuy·ªán",
                "T√¥i th√≠ch l√†m vi·ªác nh√≥m",
                "T√¥i th√≠ch s·ª≠ d·ª•ng m√°y t√≠nh",
                "T√¥i th√≠ch t·ªï ch·ª©c, qu·∫£n l√Ω c√¥ng vi·ªác",
                "T√¥i c√≥ √≥c s√°ng t·∫°o, th√≠ch l√†m m·ªõi",
                "T√¥i th√≠ch l√†m vi·ªác ƒë·ªôc l·∫≠p"
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }


        elif intent_name == "I_tuvan_hoc_nghe_thay_vi_dai_hoc":
            suggestions = [
                "T√¥i ƒëang ph√¢n v√¢n gi·ªØa h·ªçc ƒë·∫°i h·ªçc v√† h·ªçc ngh·ªÅ",
                "H·ªçc ngh·ªÅ c√≥ c∆° h·ªôi vi·ªác l√†m kh√¥ng?",
                "T√¥i mu·ªën bi·∫øt m√¥ h√¨nh v·ª´a h·ªçc v·ª´a l√†m",
                "T√¥i g·∫∑p kh√≥ khƒÉn t√†i ch√≠nh, c√≥ n√™n h·ªçc ngh·ªÅ kh√¥ng?",
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name == "I_tuvan_nganh_de_xin_viec":
            suggestions = [
                "Ng√†nh n√†o d·ªÖ t√¨m vi·ªác sau khi t·ªët nghi·ªáp?",
                "H·ªçc ng√†nh n√†o c√≥ c∆° h·ªôi l√†m vi·ªác cao?",
                "C√≥ ng√†nh n√†o c√≥ nhu c·∫ßu tuy·ªÉn d·ª•ng nhi·ªÅu kh√¥ng?",
                "T√¥i c·∫ßn h·ªçc k·ªπ nƒÉng g√¨ ƒë·ªÉ d·ªÖ xin vi·ªác?",
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name == "I_tuvan_theo_so_thich":
            suggestions = [
                "T√¥i th√≠ch gi·∫£i b√†i th√¨ h·ªçc ng√†nh g√¨?",
                "T√¥i th√≠ch giao ti·∫øp th√¨ h·ªçc ng√†nh g√¨?",
                "T√¥i th√≠ch s√°ng t·∫°o th√¨ h·ªçc ng√†nh g√¨?",
                "T√¥i th√≠ch qu·∫£n l√Ω th√¨ n√™n h·ªçc ng√†nh n√†o?",
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name == "I_tuvan_theo_dinh_huong_nghe":
            suggestions = [
                "T√¥i mu·ªën ch·ªçn ng√†nh ƒë√∫ng v·ªõi ngh·ªÅ t∆∞∆°ng lai",
                "T√¥i ch∆∞a r√µ ng√†nh n√†o ph√π h·ª£p v·ªõi ngh·ªÅ t√¥i mu·ªën l√†m",
                "Ng√†nh n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu ngh·ªÅ nghi·ªáp hi·ªán nay?",
                "T√¥i c·∫ßn k·ªπ nƒÉng g√¨ ƒë·ªÉ theo ƒëu·ªïi ngh·ªÅ m∆° ∆∞·ªõc?",
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }

        elif intent_name == "I_tuvan_vua_hoc_vua_lam":
            suggestions = [
                "C√≥ m√¥ h√¨nh n√†o v·ª´a h·ªçc v·ª´a l√†m kh√¥ng?",
                "T√¥i mu·ªën ƒëi l√†m s·ªõm trong khi h·ªçc",
                "H·ªçc ngh·ªÅ c√≥ ƒë∆∞·ª£c th·ª±c t·∫≠p s·ªõm kh√¥ng?",
                "C√≥ ng√†nh n√†o ph√π h·ª£p v·ªõi m√¥ h√¨nh v·ª´a h·ªçc v·ª´a l√†m?",
            ]

            return {
                "response": fulfillment_text,
                "suggestions": suggestions
            }


        elif intent_name.startswith("I_vieclam_ho_tro"):
            fulfillment_text = get_vieclam_info_by_intent(intent_name.replace("I_", "").lower())

        # L∆∞u l∆∞·ª£t chat
        turn_order = get_next_turn_order(session_id)
        save_turn(
            session_id,
            turn_order,
            user_query,
            intent_name,
            result.parameters,
            fulfillment_text
        )

        return {
            "response": fulfillment_text,
            "suggestions": suggestions
        }

    except Exception as e:
        return {"response": f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"}


def save_turn(session_id, turn_order, user_query, intent_name, parameters, bot_response):
    conn = None
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT session_id FROM chatbot_sessions WHERE session_id = %s", (session_id,))
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO chatbot_sessions (session_id) VALUES (%s)", (session_id,))

        cursor.execute("""
                       INSERT INTO chatbot_turns (session_id, turn_order, user_query, intent_name, parameters,
                                                  bot_response)
                       VALUES (%s, %s, %s, %s, %s, %s)
                       """, (session_id, turn_order, user_query, intent_name, str(parameters), bot_response))

        conn.commit()
    except Error as e:
        print(f"L·ªói khi l∆∞u l∆∞·ª£t chat: {e}")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


def get_next_turn_order(session_id):
    conn = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM chatbot_turns WHERE session_id = %s", (session_id,))
        count = cursor.fetchone()[0]
        return count + 1
    except Error as e:
        print(f"L·ªói khi l·∫•y s·ªë l∆∞·ª£t chat: {e}")
        return 1
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


def mark_session_ended(session_id):
    conn = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE chatbot_sessions SET is_ended = TRUE WHERE session_id = %s", (session_id,))
        conn.commit()
    except Error as e:
        print(f"L·ªói khi ƒë√°nh d·∫•u k·∫øt th√∫c phi√™n: {e}")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()
